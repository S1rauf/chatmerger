// static/main-tab.js
import { apiCall } from './api.js?v=1.0.0';
import { escapeHtml } from './ui.js?v=1.0.0';

const tg = window.Telegram.WebApp;
let loadedAccounts = [];

export async function loadMainStatus() {
    const card = document.getElementById('mainStatusCard');
    if (!card) {
        console.error("Element with id 'mainStatusCard' not found!");
        return;
    }

    const statusData = await apiCall('/api/main-status');
    if (!statusData) {
        card.innerHTML = `<p class="status-error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å.</p>`;
        card.classList.remove('status-loading');
        return;
    }

    const warningDiv = document.getElementById('termsAgreementWarning');
    if (warningDiv) {
        if (!statusData.has_agreed_to_terms) {
            warningDiv.innerHTML = `
                <p><strong>–í–∞–∂–Ω–æ!</strong> –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ.</p>
                <button id="showTermsBtn">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å</button>
            `;
            warningDiv.classList.remove('hidden');
        } else {
            warningDiv.classList.add('hidden');
        }
    }

    const tariffLine = statusData.tariff_expires_at_display
        ? `${escapeHtml(statusData.current_tariff_display)} (${escapeHtml(statusData.tariff_expires_at_display)})`
        : escapeHtml(statusData.current_tariff_display);

    card.innerHTML = `
        <p><strong>–¢–∞—Ä–∏—Ñ:</strong> ${tariffLine}</p>
        <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> ${escapeHtml(statusData.user_balance_rub_str)}</p>
        <button id="manageBillingBtn">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏</button>
    `;
    card.classList.remove('status-loading');
    
    document.getElementById('manageBillingBtn').addEventListener('click', () => {
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏ –ø–æ data-–∞—Ç—Ä–∏–±—É—Ç—É –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
        const tariffTabButton = document.querySelector('.tab-button[data-tab="tariffsTab"]');
        if (tariffTabButton) {
            tariffTabButton.click();
        }
    });

    const btnAdd = document.getElementById('btnAddAvitoAccount');
    btnAdd.classList.remove('hidden');
    btnAdd.onclick = () => {
        // –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
        tg.showConfirm('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç Avito –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?', (confirmed) => {
            if (confirmed) {
                tg.openLink(statusData.auth_url);
            }
        });
    };
}

export async function loadAvitoAccounts() {
    const listDiv = document.getElementById('avitoAccountsList');
    listDiv.innerHTML = `<p class="status-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</p>`;
    const accounts = await apiCall('/api/avito-accounts');
    
    // =========================================================
    //
    //           !!! –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–ö–£ –ó–î–ï–°–¨ !!!
    //
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    //
    // =========================================================
    console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:", accounts); 

    if (!accounts || !Array.isArray(accounts)) {
        listDiv.innerHTML = `<p class="status-error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã.</p>`;
        console.error("–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –∫–∞–∫ null/undefined.");
        return;
    }
    loadedAccounts = accounts;
    
    if (accounts.length === 0) {
        listDiv.innerHTML = `<p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</p>`;
        return;
    }

    listDiv.innerHTML = '';
    accounts.forEach(acc => {
        // –î–æ–±–∞–≤–∏–º –µ—â–µ –æ–¥–∏–Ω –ª–æ–≥, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", acc);

        const div = document.createElement('div');
        div.className = 'item-card avito-account-card';
        
        // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ chats_count
        const chatsCount = (typeof acc.chats_count === 'number') ? acc.chats_count : 'N/A';
        const tokenStatusText = acc.token_status_text || "–û—à–∏–±–∫–∞";
        const tokenStatusClass = acc.token_status_class || "status-error";

        div.innerHTML = `
            <div class="avito-account-info">
                <p><strong>${acc.is_active_tg_setting ? '‚û°Ô∏è ' : ''}${escapeHtml(acc.custom_alias || acc.avito_profile_name || `–ü—Ä–æ—Ñ–∏–ª—å ${acc.avito_user_id}`)}</strong></p>
                <p class="hint">–°—Ç–∞—Ç—É—Å: <span class="${acc.token_status_class}">${acc.token_status_text}</span> | –ß–∞—Ç–æ–≤: ${chatsCount}</p>
            </div>
            <div class="avito-account-actions">
                 <button class="small-btn js-sync-account" data-id="${acc.id}" title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã">üîÑ</button>
                 <button class="small-btn js-manage-account" data-id="${acc.id}">–£–ø—Ä–∞–≤–ª—è—Ç—å</button>
            </div>
        `;
        listDiv.appendChild(div);
    });
}

export async function syncAccount(accountId) {
    const button = document.querySelector(`.js-sync-account[data-id="${accountId}"]`);
    if(button) button.innerHTML = '...'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    const result = await apiCall(`/api/avito-accounts/${accountId}/sync-chats`, 'POST');
    
    if (result && result.success) {
        tg.HapticFeedback.notificationOccurred('success');
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –Ω–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        const card = button.closest('.avito-account-card');
        if (card) {
            const hint = card.querySelector('.hint');
            if (hint) {
                // –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
                hint.textContent = hint.textContent.replace(/–ß–∞—Ç–æ–≤: \d+/, `–ß–∞—Ç–æ–≤: ${result.chats_count}`);
            }
        }
    }
    if(button) button.innerHTML = 'üîÑ'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É
}

export function openManageModal(accountId) {
    const account = loadedAccounts.find(acc => acc.id === accountId);
    if (!account) return;

    document.getElementById('managingAccountId').value = accountId;
    document.getElementById('manageAccountModalTitle').textContent = `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${escapeHtml(account.custom_alias || account.avito_profile_name || `ID ${account.avito_user_id}`)}`;
    document.getElementById('accountAliasInput').value = account.custom_alias || '';

    const modal = document.getElementById('manageAccountModal');
    if(modal) {
        modal.classList.remove('hidden');
    }
}

export function closeManageModal() {
    const modal = document.getElementById('manageAccountModal');
    if(modal) {
        modal.classList.add('hidden');
    }
}

export async function saveAlias() {
    const accountId = document.getElementById('managingAccountId').value;
    const alias = document.getElementById('accountAliasInput').value.trim();
    
    const result = await apiCall(`/api/avito-accounts/${accountId}/alias`, 'PUT', { alias: alias });
    if (result && result.success) {
        tg.HapticFeedback.notificationOccurred('success');
        closeManageModal();
        loadAvitoAccounts();
    }
}

export async function deleteAccount() {
    const accountId = document.getElementById('managingAccountId').value;
    const account = loadedAccounts.find(acc => acc.id === parseInt(accountId));
    
    tg.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç "${escapeHtml(account.custom_alias || account.avito_profile_name)}"?`, async (confirmed) => {
        if (confirmed) {
            const result = await apiCall(`/api/avito-accounts/${accountId}`, 'DELETE');
            if (result && result.success) {
                tg.HapticFeedback.notificationOccurred('success');
                tg.showAlert('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.');
                closeManageModal();
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å—Ç–∞—Ç—É—Å, –∏ –∞–∫–∫–∞—É–Ω—Ç—ã
                loadAvitoAccounts();
                loadMainStatus();
            }
        }
    });
}
// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
export function openTermsModal() {
    apiCall('/api/main-status').then(data => {
        if (data && data.terms_text) {
            const plainText = data.terms_text.replace(/<[^>]*>?/gm, '');
            document.getElementById('termsModalBody').textContent = plainText;
            document.getElementById('termsModal').classList.remove('hidden');
        }
    });
}

export function closeTermsModal() {
    document.getElementById('termsModal').classList.add('hidden');
}

export async function acceptTerms() {
    const result = await apiCall('/api/user/accept-terms', 'POST');
    if (result && result.success) {
        Telegram.WebApp.HapticFeedback.notificationOccurred('success');
        Telegram.WebApp.showAlert('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.');
        closeTermsModal();
        loadMainStatus(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    }
}