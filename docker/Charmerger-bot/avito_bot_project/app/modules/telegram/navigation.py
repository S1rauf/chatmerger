import logging
from html import escape as html_escape

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from .keyboards import (
    get_main_menu_keyboard,
    get_avito_accounts_menu,
    get_wallet_menu_keyboard,
    get_tariffs_list_keyboard
)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
from db_models import User
from modules.database.crud import get_or_create_user, get_user_avito_accounts

# –°–µ—Ä–≤–∏—Å—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from modules.billing.service import billing_service
from modules.billing.config import TARIFF_CONFIG
from .keyboards import get_support_menu_keyboard
from shared.config import SUPPORT_GREETING_MESSAGE

logger = logging.getLogger(__name__)


async def handle_navigation_by_action(
    action: str, 
    callback: types.CallbackQuery, 
    state: FSMContext,
    **kwargs
):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω.
    
    :param action: –°—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, "main_menu", "accounts_list".
    :param callback: –û–±—ä–µ–∫—Ç CallbackQuery, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–µ—Ä–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    :param state: FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –µ–≥–æ –æ—á–∏—Å—Ç–∫–∏.
    """
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ FSM-–æ—Ç–º–µ–Ω—è—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    # ---!!! –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –° –í–°–ü–õ–´–í–ê–Æ–©–ò–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú !!!---
    if action == "cancel_fsm":
        # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        data = await state.get_data()
        prompt_message_id = data.get('prompt_message_id')
        
        # 2. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # 3. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º")
        if prompt_message_id:
            try:
                await callback.bot.delete_message(callback.from_user.id, prompt_message_id)
            except TelegramBadRequest:
                pass
        
        # 4. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        
        return

    # –î–ª—è –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    user_model = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username
    )

    # ==========================================================
    # === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
    # ==========================================================
    if action == "main_menu":
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, <b>{html_escape(callback.from_user.full_name)}</b>!\n\n"
            "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ Avito.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Could not edit message for main_menu, reason: {e}")

    # ==========================================================
    # === –°–ü–ò–°–û–ö AVITO-–ê–ö–ö–ê–£–ù–¢–û–í
    # ==========================================================
    elif action == "accounts_list":
        accounts = await get_user_avito_accounts(callback.from_user.id)
        text = "üë§ <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã Avito</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
        if not accounts:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Avito. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π!"
        
        keyboard = get_avito_accounts_menu(accounts)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    # ==========================================================
    # === –ö–û–®–ï–õ–ï–ö –ò –¢–ê–†–ò–§–´ (–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é)
    # ==========================================================
    elif action == "wallet_and_tariffs":
        text = f"üí∞ <b>–ö–æ—à–µ–ª–µ–∫ –∏ –¢–∞—Ä–∏—Ñ—ã</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_model.balance:.2f} ‚ÇΩ</b>"
        keyboard = get_wallet_menu_keyboard(user_model)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    # ==========================================================
    # === –°–ü–ò–°–û–ö –¢–ê–†–ò–§–û–í (–° –ü–û–õ–ù–´–ú –û–ü–ò–°–ê–ù–ò–ï–ú)
    # ==========================================================
    elif action == "tariffs_list":
        current_plan = billing_service.get_user_tariff_plan(user_model)
        
        text_parts = ["üìà <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã</b>"]
        
        for plan_enum, config in TARIFF_CONFIG.items():
            header = f"<b>{config['name_readable']}</b>"
            if plan_enum == current_plan:
                header += " (–í–∞—à —Ç–µ–∫—É—â–∏–π)"
            
            price_line = f"<i>{config['price_rub']} ‚ÇΩ / {config.get('duration_days', '30')} –¥–Ω–µ–π</i>" if config['price_rub'] > 0 else "<i>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–∞–≤—Å–µ–≥–¥–∞</i>"
            
            features_list = "\n".join(config['features_html'])
            
            tariff_block = (
                f"{header}\n{price_line}\n"
                f"<blockquote expandable>{features_list}</blockquote>"
            )
            text_parts.append(tariff_block)
            
        text = "\n\n".join(text_parts)
        text += "\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±–ª–æ–∫, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
        
        keyboard = get_tariffs_list_keyboard(current_plan)

        await callback.message.edit_text(
            text, 
            reply_markup=keyboard, 
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    
    elif action == "support":
        text = SUPPORT_GREETING_MESSAGE
        keyboard = get_support_menu_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    # ... –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'support', 'settings' –∏ —Ç.–¥.
    
    else:
        logger.warning(f"Unknown navigation action '{action}' received from user {callback.from_user.id}")
        # –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
        try:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        except TelegramBadRequest:
            pass # –ï—Å–ª–∏ query —É–∂–µ —Å—Ç–∞—Ä—ã–π, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ

async def _cancel_fsm_and_cleanup(callback: types.CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ —É–¥–∞–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º")
    if prompt_message_id:
        try:
            await callback.bot.delete_message(callback.from_user.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass