# /app/modules/telegram/handlers.py

import logging
import html
import asyncio
from html import escape as html_escape
from datetime import datetime, timezone
from sqlalchemy import select
from sqlalchemy.orm import selectinload
import json
from .view_renderer import ViewRenderer
from db_models import User, Template
from aiogram import Bot, Router, types, F, Dispatcher
from aiogram.filters import CommandStart, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import decode_payload
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
import redis.asyncio as redis
from .keyboards import get_single_account_menu, get_avito_accounts_menu
from .filters import HasAvitoContextFilter
from shared.config import REPLY_MAPPING_TTL
from shared.config import settings
from modules.database.crud import (
    get_or_create_user,
    get_user_templates,
    get_avito_account_by_id,
    delete_avito_account,
    toggle_avito_account_active_status,
    get_user_avito_accounts,
    upsert_note_for_chat,
    get_account_stats,
    set_avito_account_alias
)
from modules.avito.client import AvitoAPIClient
from .keyboards import get_main_menu_keyboard, get_avito_accounts_menu, get_single_account_menu, build_chats_list_keyboard, get_wallet_menu_keyboard, get_tariffs_list_keyboard, get_deposit_options_keyboard,get_templates_for_chat_keyboard
from .states import RenameAvitoAccount, EditChatNote, AcceptInvite 
from .view_provider import (
    rehydrate_view_model,
    subscribe_user_to_view,
    VIEW_KEY_TPL
)
from aiogram.enums import ParseMode 
from .view_provider import subscribe_user_to_view 
from .view_renderer import ViewRenderer
from modules.billing.service import billing_service
from modules.billing.exceptions import TariffLimitReachedError, InsufficientFundsError, BillingError
from modules.billing.enums import TariffPlan
from modules.billing.config import TARIFF_CONFIG
from .keyboards import get_deposit_options_keyboard 
from .payment_handlers import send_deposit_invoice 
from .navigation import handle_navigation_by_action
from shared.database import get_session
from modules.database import crud
from aiogram.fsm.context import FSMContext
from shared.config import SUPPORT_GREETING_MESSAGE, SUPPORT_FAQ
from .keyboards import get_support_menu_keyboard
from .states import ContactAdmin
from modules.avito.messaging import AvitoMessaging

logger = logging.getLogger(__name__)
router = Router()



# ===================================================================
# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ========================================
# ===================================================================

async def _publish_view_update(redis_client: redis.Redis, account_id: int, chat_id: str):
    view_key = f"chat_view:{account_id}:{chat_id}"
    await redis_client.publish("views:update_required", view_key)
    logger.info(f"Published update event for view: {view_key}")

async def _show_accounts_menu(target: types.Message | types.CallbackQuery, user_telegram_id: int):
    accounts = await get_user_avito_accounts(user_telegram_id)
    text = "üë§ **–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã Avito**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π." if accounts else \
           "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Avito. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π!"
    keyboard = get_avito_accounts_menu(accounts)
    message_to_act_on = target.message if isinstance(target, types.CallbackQuery) else target
    try:
        await message_to_act_on.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            if isinstance(target, types.CallbackQuery): await target.answer()
            return
        logger.warning(f"Could not edit message, sending new one. Reason: {e}")
        try:
            await message_to_act_on.delete()
        except TelegramBadRequest: pass
        await target.bot.send_message(target.from_user.id, text, reply_markup=keyboard, parse_mode="Markdown")

async def show_chat_card_by_context(avito_context: dict, user_tg: types.User, redis_client: redis.Redis, bot: Bot):
    """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        account_id = int(avito_context['avito_account_id'])
        chat_id = avito_context['avito_chat_id']
        account = await get_avito_account_by_id(account_id)
        if not account: return

        view_key = VIEW_KEY_TPL.format(account_id=account.id, chat_id=chat_id)
        model = await rehydrate_view_model(redis_client, account, chat_id)
        if not model: return

        renderer = ViewRenderer(bot, redis_client)
        user_db = await get_or_create_user(user_tg.id, user_tg.username)
        sent_message = await renderer.render_new_card(model, user_db)
        if sent_message:
            await subscribe_user_to_view(redis_client, view_key, user_db.telegram_id, sent_message.message_id)
            context_key = f"tg_context:{sent_message.message_id}"
            await redis_client.set(context_key, json.dumps(avito_context), ex=REPLY_MAPPING_TTL)
    except Exception as e:
        logger.error(f"Failed to redraw chat card after error: {e}")
# ===================================================================
# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò ========================================
# ===================================================================

@router.callback_query(lambda c: c.data == "avito_acc:add_new")
async def add_new_avito_account(callback: types.CallbackQuery):
    logger.info(f"Handler 'add_new_avito_account' triggered for user {callback.from_user.id}")
    
    try:
        async with get_session() as session:
            db_user = await crud.get_or_create_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username
            )
            
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
            await billing_service.check_avito_account_limit(db_user, session)
            
        await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", show_alert=False)
        
        connect_url = f"{settings.webapp_base_url}/connect/avito?user_id={db_user.id}"
        
        text = (
            "‚úÖ **–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç Avito –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n\n"
            "*–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω—É–∂–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ Avito –≤ –±—Ä–∞—É–∑–µ—Ä–µ.*"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Avito", url=connect_url)
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="navigate:accounts_list")
        builder.adjust(1)
              
        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="Markdown"
        )

    except TariffLimitReachedError as e:
        await callback.answer(str(e), show_alert=True)
    except Exception as e:
        logger.error(f"Error in add_new_avito_account: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def some_handler_to_add_account(user: User):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    user_accounts = await get_user_avito_accounts(user.telegram_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    if not billing_service.can_add_avito_account(user, len(user_accounts)):
        await bot.send_message(user.telegram_id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Avito –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.")
        return
        
# ===================================================================
# === –û–°–ù–û–í–ù–´–ï –ò –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –•–ï–ù–î–õ–ï–†–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==============
# ===================================================================
@router.callback_query(F.data.startswith("navigate:"))
async def handle_navigation_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]
    await handle_navigation_by_action(action, callback, state)


@router.message(F.text, F.reply_to_message, HasAvitoContextFilter())
async def handle_reply_message(message: types.Message, redis_client: redis.Redis, avito_context: dict):
    logger.info(f"Handling text reply to Avito message. Context: {avito_context}")
    
    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
        user = await get_or_create_user(message.from_user.id, message.from_user.username)
        await billing_service.check_and_increment_daily_messages(user, redis_client)

        # --- –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ ---
        await redis_client.xadd(
            "avito:chat:actions",
            {"account_id": str(avito_context['avito_account_id']), "chat_id": avito_context['avito_chat_id'], "action": "mark_read"}
        )
        outgoing_message = {
            "account_id": str(avito_context['avito_account_id']),
            "chat_id": avito_context['avito_chat_id'],
            "text": message.text,
            "action_type": "manual_reply",
            "author_name": message.from_user.first_name or message.from_user.username or f"ID {message.from_user.id}"
        }
        await redis_client.xadd("avito:outgoing:messages", outgoing_message)
        await message.delete()

    except TariffLimitReachedError as e:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ ---
        await message.reply(f"‚ùóÔ∏è {e}\n\n–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ.")
    except Exception as e:
        logger.error(f"Error in handle_reply_message: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –§–û–¢–û–ì–†–ê–§–ò–ï–ô ---
@router.message(F.photo, F.reply_to_message, HasAvitoContextFilter())
async def handle_photo_reply(message: types.Message, redis_client: redis.Redis, bot: Bot, avito_context: dict):
    logger.info(f"Handling PHOTO reply (re-send logic). Context: {avito_context}")
    
    old_card_message = message.reply_to_message
    if not old_card_message: return

    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –î–û –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
        user = await get_or_create_user(message.from_user.id, message.from_user.username)
        await billing_service.check_and_increment_daily_messages(user, redis_client)

        # --- –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ ---
        photo = message.photo[-1]
        photo_file_id = photo.file_id
        caption = message.caption or ""

        try:
            await old_card_message.delete()
            await message.delete()
        except TelegramBadRequest as e:
            logger.warning(f"Could not delete old messages: {e}")

        new_photo_message = None
        new_card_message = None
        try:
            new_photo_message = await bot.send_photo(
                chat_id=message.chat.id, photo=photo_file_id,
                caption=f"<i>(–í–∞—à–µ –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Avito)</i>\n{caption}", parse_mode=ParseMode.HTML
            )
            new_card_message = await bot.send_message(
                chat_id=message.chat.id,
                text=old_card_message.text + "\n\n<b>‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>",
                parse_mode=ParseMode.HTML, disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Failed to resend messages: {e}")
            await bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ.")
            return

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Avito
        try:
            account_id = int(avito_context['avito_account_id'])
            chat_id = avito_context['avito_chat_id']
            account = await get_avito_account_by_id(account_id)
            if not account: raise ValueError("–ê–∫–∫–∞—É–Ω—Ç Avito –Ω–µ –Ω–∞–π–¥–µ–Ω")

            file_info = await bot.get_file(photo_file_id)
            image_bytes = await bot.download_file(file_info.file_path)
            
            api_client = AvitoAPIClient(account)
            messaging = AvitoMessaging(api_client)
            upload_response = await messaging.upload_image(image_bytes.read())
            image_id = list(upload_response.keys())[0]
            
            outgoing_message = {
                "account_id": str(account_id), "chat_id": chat_id, "action_type": "image_reply",
                "image_id": image_id, "text": caption,
                "author_name": message.from_user.first_name or message.from_user.username or f"ID {message.from_user.id}",
            }
            await redis_client.xadd("avito:outgoing:messages", outgoing_message)

            view_key = f"chat_view:{account_id}:{chat_id}"
            await subscribe_user_to_view(redis_client, view_key, message.from_user.id, new_card_message.message_id)
            context_key = f"tg_context:{new_card_message.message_id}"
            avito_context['can_reply'] = 'true'
            await redis_client.set(context_key, json.dumps(avito_context), ex=REPLY_MAPPING_TTL)
        except Exception as e_inner:
            logger.error(f"Error during Avito processing for chat {chat_id}: {e_inner}", exc_info=True)
            if new_card_message:
                await bot.edit_message_text(
                    text=new_card_message.text.replace("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏."),
                    chat_id=new_card_message.chat.id, message_id=new_card_message.message_id
                )
    
    except TariffLimitReachedError as e:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ ---
        await message.reply(f"‚ùóÔ∏è {e}\n\n–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ.")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_chat_card_by_context(avito_context, message.from_user, redis_client, bot)
        # –£–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        await message.delete()

    except Exception as e:
        logger.error(f"Outer error in handle_photo_reply for chat {avito_context.get('avito_chat_id')}: {e}", exc_info=True)
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: types.Message, command: CommandObject, state: FSMContext, redis_client):
    payload = command.args
    user_id = message.from_user.id # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ª–æ–≥–∞
    logger.info(f"User {user_id} started bot with deep-link payload: {payload}")

    if payload.startswith("fw_accept_"):
        invite_code = payload.replace("fw_accept_", "")
        async with get_session() as session:
            # --- –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Ä–∞–∑—É, –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ ---
            rule = await session.scalar(
                select(crud.ForwardingRule)
                .where(crud.ForwardingRule.invite_code == invite_code)
                .options(selectinload(crud.ForwardingRule.owner))
            )
            if not rule or rule.target_telegram_id is not None:
                await message.answer("‚ùå –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
                return
            if rule.invite_password:
                await state.update_data(invite_code=invite_code)
                
                # ---!!! –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ‚Ññ1: –£–°–¢–ê–ù–û–í–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø !!!---
                target_state = AcceptInvite.waiting_for_password
                logger.critical(
                    f"[DEBUG-FSM] DEEP_LINK for user {user_id}: "
                    f"Attempting to set state to '{target_state.state}'"
                )
                await state.set_state(target_state)
                # --------------------------------------------------

                await message.answer("–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            else:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è
                await crud.accept_forwarding_invite(session, rule.id, message.from_user.id)
                await message.answer("‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>", parse_mode="HTML")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if rule.owner:
                     notification_text = f"‚úÖ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ ¬´{html.escape(rule.custom_rule_name)}¬ª –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
                     await redis_client.xadd("telegram:outgoing:messages", {"user_id": rule.owner.telegram_id, "text": notification_text})
    else:
        await handle_start_command(message, state)


# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –í–í–û–î–ê –ü–ê–†–û–õ–Ø (—Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∏ –ª–æ–≥–∞–º–∏) ---
@router.message(StateFilter(AcceptInvite.waiting_for_password)) # <--- !!! –î–û–ë–ê–í–õ–ï–ù –≠–¢–û–¢ –î–ï–ö–û–†–ê–¢–û–† !!!
async def process_invite_password(message: types.Message, state: FSMContext, redis_client):
    user_id = message.from_user.id # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ª–æ–≥–∞
    
    # ---!!! –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ‚Ññ2: –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø !!!---
    current_state = await state.get_state()
    logger.critical(
        f"[DEBUG-FSM] PROCESS_PASSWORD for user {user_id}: "
        f"Handler triggered. Current FSM state is: '{current_state}'"
    )
    # ----------------------------------------------------

    user_password = message.text.strip()
    state_data = await state.get_data()
    invite_code = state_data.get('invite_code')

    if not invite_code:
        await state.clear()
        return
    
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    async with get_session() as session:
        rule = await session.scalar(
            select(crud.ForwardingRule)
            .where(crud.ForwardingRule.invite_code == invite_code)
            .options(selectinload(crud.ForwardingRule.owner))
        )

        if not rule or rule.invite_password != user_password:
            error_msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç.")
            await delete_message_after_delay(error_msg, 5)
            return

        await crud.accept_forwarding_invite(session, rule.id, message.from_user.id)
        await state.clear()
        
        success_msg = await message.answer("‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b> –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.")
        await delete_message_after_delay(success_msg, 3)
        if rule.owner:
            notification_text = (f"‚úÖ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ ¬´{html.escape(rule.custom_rule_name)}¬ª –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(message.from_user.full_name)} (@{message.from_user.username or '...'})")
            await redis_client.xadd("telegram:outgoing:messages", {"user_id": rule.owner.telegram_id, "text": notification_text})

@router.message(CommandStart())
async def handle_start_command(message: types.Message, state: FSMContext):
    await state.clear()
    await crud.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    safe_name = html_escape(message.from_user.full_name)
    welcome_text = (f"–ü—Ä–∏–≤–µ—Ç, <b>{safe_name}</b>!\n\n–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ Avito. "
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    await message.answer(
        text=welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üë§ –ú–æ–∏ Avito –∞–∫–∫–∞—É–Ω—Ç—ã")
async def show_avito_accounts_menu_handler(message: types.Message):
    await _show_accounts_menu(message, message.from_user.id)

# ===================================================================
# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê) ===============================
# ===================================================================

@router.callback_query(F.data.startswith("account_actions:chats:") | F.data.startswith("chats:list:"))
async def show_latest_chats(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split(":")
    account_id = int(parts[2])
    offset = int(parts[3]) if len(parts) > 3 else 0
    limit = 5
    account = await crud.get_avito_account_by_id(account_id)
    if not account: return
    api_client = AvitoAPIClient(account)
    chats_data = await api_client.get_chats(limit=5, offset=offset)
    keyboard = build_chats_list_keyboard(chats_data.get("chats", []), account.id, offset, limit)
    await callback.message.edit_text(
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ **{html_escape(account.alias or f'ID {account.avito_user_id}')}**:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("chat:show_card:"))
async def show_chat_card(callback: types.CallbackQuery, redis_client: redis.Redis, bot: Bot):
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —á–∞—Ç–∞.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —á–∞—Ç—É".
    """
    await callback.answer()
    
    try:
        _, _, account_id_str, chat_id = callback.data.split(":")[:4]
        account_id = int(account_id_str)
    except (ValueError, IndexError):
        return

    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    account = await get_avito_account_by_id(account_id)
    if not (user and account): return

    # --- –õ–û–ì–ò–ö–ê –ü–ï–†–ï–†–ò–°–û–í–ö–ò ---
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –º–æ–¥–µ–ª—å —á–∞—Ç–∞
    view_key = VIEW_KEY_TPL.format(account_id=account_id, chat_id=chat_id)
    model = await rehydrate_view_model(redis_client, account, chat_id)
    
    if not model:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    model['telegram_message_id'] = callback.message.message_id
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –≤–∏–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞—Ç–∞
    renderer = ViewRenderer(bot, redis_client)
    await renderer.update_all_subscribers(view_key, model)

# ==========================================================
# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–ü–†–û–ß–ò–¢–ê–ù–û" (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø)
# ==========================================================
@router.callback_query(F.data.startswith("chat:mark_read:"))
async def mark_read_handler(callback: types.CallbackQuery, redis_client: redis.Redis, bot: Bot):
    try:
        await callback.answer("–ü–æ–º–µ—á–∞—é –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ...")
    except TelegramBadRequest:
        return

    try:
        _, _, account_id_str, chat_id = callback.data.split(":")[:4]
        account_id = int(account_id_str)
    except (ValueError, IndexError):
        logger.error(f"Invalid callback_data format for mark_read: {callback.data}")
        return

    account = await crud.get_avito_account_by_id(account_id)
    if not account:
        logger.warning(f"Account {account_id} not found for mark_read action.")
        return

    try:
        api_client = AvitoAPIClient(account)
        await api_client.mark_chat_as_read(chat_id)
        logger.info(f"Chat {chat_id} marked as read in Avito API by user {callback.from_user.id}")
    except AvitoAPIError as e:
        logger.error(f"Failed to mark chat as read in Avito API for chat {chat_id}: {e}")
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API Avito.", show_alert=True)
        except TelegramBadRequest: pass
        return

    view_key = VIEW_KEY_TPL.format(account_id=account.id, chat_id=chat_id)
    model_json = await redis_client.get(view_key)
    if not model_json:
        logger.warning(f"View model not found for key: {view_key}. Cannot update Telegram messages.")
        return
        
    model: dict = json.loads(model_json)
    
    # –ú–µ–Ω—è–µ–º —Ñ–ª–∞–≥
    model['is_last_message_read'] = True
    
    # ---!!! –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ‚Ññ4 !!!---
    logger.critical(
        f"[DEBUG-READ-STATUS] MARK_READ for chat {chat_id}: "
        f"SETTING is_last_message_read = True. Saving to Redis and updating subscribers."
    )
    
    await redis_client.set(view_key, json.dumps(model), keepttl=True)
    
    renderer = ViewRenderer(bot, redis_client)
    await renderer.update_all_subscribers(view_key, model)


@router.callback_query(F.data.startswith("chat:block:") | F.data.startswith("chat:unblock:"))
async def block_unblock_chat_handler(callback: types.CallbackQuery, redis_client: redis.Redis, bot: Bot):
    await callback.answer("–í—ã–ø–æ–ª–Ω—è—é...")
    
    action, _, account_id_str, chat_id, user_id_str = callback.data.split(":")
    account_id = int(account_id_str)
    
    account = await get_avito_account_by_id(account_id)
    if not account: return

    api_client = AvitoAPIClient(account=account)
    
    try:
        new_status = (action == "block")
        if new_status:
            chat_info = await api_client.get_chat_info(chat_id)
            item_id = chat_info.get("context", {}).get("value", {}).get("id")
            await api_client.block_user_in_chat(chat_id, int(user_id_str), item_id)
        else:
            await api_client.unblock_user(int(user_id_str))

        view_key = f"chat_view:{account.id}:{chat_id}"
        model_json = await redis_client.get(view_key)
        if model_json:
            model = json.loads(model_json)
            model['is_blocked'] = new_status
            model['telegram_message_id'] = callback.message.message_id
            await redis_client.set(view_key, json.dumps(model), keepttl=True)

            renderer = ViewRenderer(bot, redis_client)
            await renderer.render(view_key=view_key, model=model)
        
        await callback.answer("–ì–æ—Ç–æ–≤–æ!", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error in block/unblock handler: {e}", exc_info=True)
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å.", show_alert=True)

# ===================================================================
# === –ú–ê–®–ò–ù–´ –°–û–°–¢–û–Ø–ù–ò–ô (FSM) (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===================
# ===================================================================

# --- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û) ---
@router.callback_query(F.data.startswith("avito_acc:rename:"))
async def rename_avito_account_start(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    account_id = int(callback.data.split(":")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ
    await state.update_data(
        account_id=account_id, 
        original_message_id=callback.message.message_id
    )
    await state.set_state(RenameAvitoAccount.waiting_for_new_alias)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="navigate:cancel_fsm")
    
    prompt = await callback.message.answer(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (3-50 —Å–∏–º–≤).",
        reply_markup=builder.as_markup() # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer()


@router.message(StateFilter(RenameAvitoAccount.waiting_for_new_alias))
async def rename_avito_account_process(message: types.Message, state: FSMContext, bot: Bot):
    """–®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é."""
    new_alias = message.text.strip()
    if not (3 <= len(new_alias) <= 50):
        return await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
    
    data = await state.get_data()
    account_id = data['account_id']
    original_message_id = data['original_message_id']
    prompt_message_id = data['prompt_message_id']

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –≤ –ë–î
    await set_avito_account_alias(account_id, new_alias)
    
    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = await get_user_avito_accounts(message.from_user.id)
    text = "üë§ **–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã Avito**\n\n–ü—Å–µ–≤–¥–æ–Ω–∏–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
    keyboard = get_avito_accounts_menu(accounts)

    # 3. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ò–°–•–û–î–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID
    try:
        await bot.edit_message_text(
            text=text,
            chat_id=message.chat.id,
            message_id=original_message_id,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except TelegramBadRequest as e:
        logger.error(f"Could not edit original accounts menu: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

    # 4. –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    try:
        await bot.delete_message(message.chat.id, prompt_message_id)
        await message.delete()
    except TelegramBadRequest:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω—ã

    # 5. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

#text="‚úçÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏**\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.",
# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —á–∞—Ç—É (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã) ---
@router.callback_query(F.data.startswith("chat:edit_note:"))
async def edit_chat_note_start(callback: types.CallbackQuery, state: FSMContext, bot: Bot, redis_client: redis.Redis):
    await callback.answer()
    _, _, account_id_str, chat_id = callback.data.split(":")
    account_id = int(account_id_str)

    user = await crud.get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name
    )
    
    view_key = VIEW_KEY_TPL.format(account_id=account_id, chat_id=chat_id)
    model_json = await redis_client.get(view_key)
    model = json.loads(model_json) if model_json else {}

    prompt_text = "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏.\n\n"
    
    # –ò—â–µ–º –∑–∞–º–µ—Ç–∫—É –æ—Ç –¢–ï–ö–£–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª–∏
    note_data = model.get("notes", {}).get(str(user.telegram_id))
    if note_data and note_data.get('text'):
        prompt_text += "–¢–µ–∫—É—â–∞—è –∑–∞–º–µ—Ç–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
        prompt_text += f"<code>{html.escape(note_data.get('text'))}</code>\n\n"
    
    prompt_text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: <code>—É–¥–∞–ª–∏—Ç—å</code>."

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="note:cancel_edit")
    
    await state.update_data(account_id=account_id, chat_id=chat_id)
    await state.set_state(EditChatNote.waiting_for_note_text)
    
    prompt_message = await bot.send_message(
        chat_id=callback.from_user.id, text=prompt_text,
        reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await state.update_data(prompt_message_id=prompt_message.message_id)


# ==========================================================
# === –û–ë–†–ê–ë–û–¢–ß–ò–ö FSM –î–õ–Ø –ó–ê–ú–ï–¢–ö–ò (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø)
# ==========================================================
@router.message(StateFilter(EditChatNote.waiting_for_note_text))
@router.message(StateFilter(EditChatNote.waiting_for_note_text))
async def process_chat_note_text(message: types.Message, state: FSMContext, redis_client: redis.Redis, bot: Bot):
    data = await state.get_data()
    account_id = data.get('account_id')
    chat_id = data.get('chat_id')
    prompt_message_id = data.get('prompt_message_id')
    
    if not all([account_id, chat_id]):
        await state.clear()
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    note_text = message.text.strip()
    user = await crud.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    
    feedback_text = ""
    is_deletion = note_text.lower() == '—É–¥–∞–ª–∏—Ç—å'
    
    if is_deletion:
        # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ –ë–î (upsert —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ)
        await crud.upsert_note_for_chat(account_id, chat_id, text="", author_id=user.id)
        feedback_text = "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!"
    else:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
        if len(note_text) > 500:
            await message.reply("‚ùóÔ∏è–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        await crud.upsert_note_for_chat(account_id, chat_id, note_text, user.id)
        feedback_text = "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"

    # –û–±–Ω–æ–≤–ª—è–µ–º ChatViewModel –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    view_key = VIEW_KEY_TPL.format(account_id=account_id, chat_id=chat_id)
    model_json = await redis_client.get(view_key)
    
    if model_json:
        model = json.loads(model_json)
        user_tg_id_str = str(user.telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ—Ç–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        notes = model.setdefault("notes", {})
        
        if is_deletion:
            # –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —É–±–∏—Ä–∞–µ–º –µ–µ –∏–∑ –º–æ–¥–µ–ª–∏
            if user_tg_id_str in notes:
                del notes[user_tg_id_str]
        else:
            # –ò–Ω–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ –≤ –º–æ–¥–µ–ª–∏
            notes[user_tg_id_str] = {
                "author_name": user.first_name or user.username or f"ID {user.id}",
                "text": note_text,
                "timestamp": int(datetime.now(timezone.utc).timestamp())
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        await redis_client.set(view_key, json.dumps(model), keepttl=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É —É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        renderer = ViewRenderer(bot, redis_client)
        await renderer.update_all_subscribers(view_key, model)

    # "–ü—Ä–∏–±–∏—Ä–∞–µ–º—Å—è"
    await state.clear()
    feedback_msg = await message.answer(feedback_text)
    await delete_message_after_delay(feedback_msg, 2)
    if prompt_message_id:
        try:
            await bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest: pass
    await message.delete()



@router.callback_query(F.data == "note:cancel_edit", StateFilter(EditChatNote.waiting_for_note_text))
async def cancel_edit_note_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    
    await state.clear()

    if prompt_message_id:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
            await callback.bot.delete_message(callback.from_user.id, prompt_message_id)
        except TelegramBadRequest: pass

@router.callback_query(F.data.startswith("note:delete:"))
async def delete_chat_note_handler(callback: types.CallbackQuery, redis_client: redis.Redis):
    """–®–∞–≥ 2 (–ü—É—Ç—å –ë): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"."""
    await callback.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=False)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–∞—Ä—Å–∏–º –≤—Å–µ 4 —á–∞—Å—Ç–∏ ---
    _, _, account_id_str, chat_id, target_message_id_str = callback.data.split(":")
    account_id = int(account_id_str)
    target_message_id = int(target_message_id_str)

    # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ –ë–î
    await upsert_note_for_chat(account_id, chat_id, text="", author_id=callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º view_model
    view_key = f"chat_view:{account_id}:{chat_id}"
    model_json = await redis_client.get(view_key)
    if model_json:
        model = json.loads(model_json)
        model.update({
            "note_text": None,
            "note_author_name": None,
            "note_timestamp": None,
            # –í–ê–ñ–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            "telegram_message_id": target_message_id 
        })
        await redis_client.set(view_key, json.dumps(model), keepttl=True)
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
        await _publish_view_update(redis_client, account_id, chat_id)
        
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏...")
    await callback.message.delete()

@router.callback_query(F.data == "note:cancel_edit")
async def cancel_edit_note_handler(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2 (–ü—É—Ç—å –í): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"."""
    await callback.answer()
    await state.clear()
    await callback.message.delete()

@router.callback_query(F.data.startswith("billing:purchase:"))
async def purchase_tariff_handler(callback: types.CallbackQuery, state: FSMContext, redis_client: redis.Redis):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏/—Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞.
    –†–∞–∑–ª–∏—á–∞–µ—Ç –∞–ø–≥—Ä–µ–π–¥ –∏ –¥–∞—É–Ω–≥—Ä–µ–π–¥.
    """
    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback'–∞
    plan_value = callback.data.split(":")[2]
    
    try:
        tariff_to_purchase = TariffPlan(plan_value)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ!", show_alert=True)
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await get_or_create_user(
        telegram_id=callback.from_user.id, 
        username=callback.from_user.username,
        with_accounts=True # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç.–∫. –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ
    )
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", show_alert=True)
        return

    # 3. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–∞—Ä–∏—Ñ ¬´{TARIFF_CONFIG[tariff_to_purchase]['name_readable']}¬ª...")

    try:
        # 4. –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑ –Ω–∞—à–µ–≥–æ billing_service, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        result = await billing_service.purchase_tariff(user, tariff_to_purchase, redis_client)
        
        # 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–∏—Å
        if result.get("status") == "downgrade_scheduled":
             # –ï—Å–ª–∏ –±—ã–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–∞—É–Ω–≥—Ä–µ–π–¥
             await callback.message.edit_text(
                "‚úÖ <b>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–∞—Ä–∏—Ñ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                f"–¢–∞—Ä–∏—Ñ ¬´{TARIFF_CONFIG[tariff_to_purchase]['name_readable']}¬ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
                "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
                parse_mode="HTML",
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="navigate:main_menu").as_markup()
             )
        elif result.get("status") == "upgraded":
            # –ï—Å–ª–∏ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥
            await callback.message.answer(
                f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ <b>{TARIFF_CONFIG[tariff_to_purchase]['name_readable']}</b>.",
                parse_mode="HTML"
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
            await handle_navigation_by_action("tariffs_list", callback, state)

    except InsufficientFundsError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤
        await callback.message.answer(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ</b>\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {e}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardBuilder().button(
                text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="wallet:deposit"
            ).as_markup()
        )
    except BillingError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –±–∏–ª–ª–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≥–æ –∂–µ —Ç–∞—Ä–∏—Ñ–∞)
        await callback.answer(f"‚ùï {e}", show_alert=True)
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        logger.error(f"Error purchasing tariff for user {user.id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)

def _format_features_for_telegram(features: list[str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏—á: –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è.
    """
    if not features:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_features = [
        f.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>", "")
        for f in features
    ]
    
    max_len = 0
    if clean_features:
        max_len = max(len(s) for s in clean_features)

    # –ù–µ–≤–∏–¥–∏–º—ã–π –ø—Ä–æ–±–µ–ª —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π (Figure Space)
    # –ú–æ–∂–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, U+2002 (En Space) `‚ÄÇ`
    INVISIBLE_SEPARATOR = "‚Äá" 

    padded_features = []
    for original_feature, clean_feature in zip(features, clean_features):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        padding_count = max_len - len(clean_feature)
        padding = INVISIBLE_SEPARATOR * padding_count
        padded_features.append(f"{original_feature}{padding}")

    # –°–æ–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏. –¢–µ–≥–∏ <pre><code> –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã!
    return "\n".join(padded_features)
    
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@router.callback_query(F.data == "wallet:deposit")
async def show_deposit_options_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
        reply_markup=get_deposit_options_keyboard()
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É–º–º—ã
@router.callback_query(F.data.startswith("deposit:amount:"))
async def create_deposit_invoice_handler(callback: types.CallbackQuery, bot: Bot):
    amount_kop = int(callback.data.split(":")[2])
    
    await send_deposit_invoice(
        bot=bot,
        chat_id=callback.from_user.id,
        user_id=callback.from_user.id,
        amount_kop=amount_kop
    )
    await callback.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É...")

# ===================================================================
# === –ü–†–û–ß–ò–ï –î–ï–ô–°–¢–í–ò–Ø –° –ß–ê–¢–ê–ú–ò (–®–∞–±–ª–æ–Ω—ã, –∑–∞–º–µ—Ç–∫–∏ –∏ —Ç.–¥.) ==============
# ===================================================================

@router.callback_query(F.data.startswith("chat:templates:"))
async def show_templates_for_chat(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
    
    _, _, account_id_str, chat_id = callback.data.split(":")
    account_id = int(account_id_str)

    user = await crud.get_or_create_user(telegram_id=callback.from_user.id, username=callback.from_user.username)
    if not user:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with get_session() as session:
        user_templates = await crud.get_user_templates(session, user.id)
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:"
    if not user_templates:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (WebApp)."
        
    keyboard = get_templates_for_chat_keyboard(user_templates, account_id, chat_id)
    await callback.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("template:send:"))
async def send_template_to_chat(callback: types.CallbackQuery, redis_client: redis.Redis, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –≤ Avito. –ù–ï —É–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É, –∞ –∂–¥–µ—Ç –µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞.
    """
    # 1. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —à–∞–±–ª–æ–Ω...")

    _, _, template_id_str, account_id_str, chat_id = callback.data.split(":")
    template_id = int(template_id_str)
    account_id = int(account_id_str)

    async with get_session() as session:
        template = await session.get(Template, template_id)

    if not template:
        await callback.answer("–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # 2. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ "–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    # –ú—ã –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    # –í–æ—Ä–∫–µ—Ä –ø–æ—Ç–æ–º –≤–µ—Ä–Ω–µ—Ç –µ–µ –æ–±—Ä–∞—Ç–Ω–æ.
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
    await redis_client.xadd(
        "avito:chat:actions",
        {"account_id": str(account_id), "chat_id": chat_id, "action": "mark_read"}
    )

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    outgoing_message = {
        "account_id": str(account_id),
        "chat_id": chat_id,
        "text": template.text,
        "action_type": "template_reply",
        "template_name": template.name,
        "author_name": callback.from_user.first_name or callback.from_user.username or f"ID {callback.from_user.id}"
    }
    await redis_client.xadd("avito:outgoing:messages", outgoing_message)

@router.callback_query(F.data.startswith("chat:show:"))
async def show_chat_card_handler(callback: types.CallbackQuery, redis_client: redis.Redis, bot: Bot):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass

    try:
        _, _, account_id_str, chat_id = callback.data.split(":")[:4]
        account_id = int(account_id_str)
    except (ValueError, IndexError):
        logger.error(f"Invalid callback_data format for show_chat_card: {callback.data}")
        return

    user = await crud.get_or_create_user(callback.from_user.id, callback.from_user.username)
    account = await crud.get_avito_account_by_id(account_id)
    if not (user and account):
        try:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        except TelegramBadRequest: pass
        return

    view_key = VIEW_KEY_TPL.format(account_id=account.id, chat_id=chat_id)
    
    model_json = await redis_client.get(view_key)
    
    if model_json:
        model = json.loads(model_json)
        # ---!!! –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ‚Ññ3 !!!---
        logger.critical(
            f"[DEBUG-READ-STATUS] SHOW_CARD (from cache) for chat {chat_id}: "
            f"Read from Redis is_last_message_read = {model.get('is_last_message_read')}"
        )
    else:
        logger.warning(f"No model for {view_key} in cache. Rehydrating from API...")
        # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API —á–µ—Ä–µ–∑ –ª–æ–≥ ‚Ññ1
        model = await rehydrate_view_model(redis_client, account, chat_id)
        # ---!!! –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ‚Ññ3.1 !!!---
        if model:
            logger.critical(
                f"[DEBUG-READ-STATUS] SHOW_CARD (rehydrated) for chat {chat_id}: "
                f"Value is is_last_message_read = {model.get('is_last_message_read')}"
            )

    if not model:
        try:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except TelegramBadRequest: pass
        return

    await subscribe_user_to_view(
        redis_client,
        view_key,
        callback.from_user.id,
        callback.message.message_id
    )

    model_json = await redis_client.get(view_key)
    if not model_json:
        logger.error(f"Model for {view_key} disappeared after subscription. Aborting render.")
        return
    model = json.loads(model_json)
    
    renderer = ViewRenderer(bot, redis_client)
    try:
        await renderer.update_all_subscribers(view_key, model)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.info(f"View for {view_key} is already up to date. Skipping render.")
        else:
            logger.error(f"Error rendering card for {view_key}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"Unexpected error in renderer for {view_key}: {e}", exc_info=True)

async def delete_message_after_delay(message: types.Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except TelegramBadRequest:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å
        pass

@router.callback_query(F.data == "terms:accept")
async def handle_terms_accept(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è".
    """
    user_id = callback.from_user.id
    logger.info(f"HANDLER: Caught 'terms:accept' callback from user {user_id}")
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        
        if user and not user.has_agreed_to_terms:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ—â–µ –Ω–µ —Å–æ–≥–ª–∞—à–∞–ª—Å—è
            user.has_agreed_to_terms = True
            # session.commit() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ `async with`
            logger.info(f"User {user_id} has agreed to the terms. Updating DB.")
            
            await callback.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.", show_alert=True)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
        elif user and user.has_agreed_to_terms:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Ä–∞–Ω–µ–µ
            await callback.answer("–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è.", show_alert=False)
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
        else:
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", show_alert=True)

@router.callback_query(F.data.startswith("avito_acc:select:"))
async def select_avito_account(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    await callback.answer()
    account_id = int(callback.data.split(":")[2])
    
    account = await crud.get_avito_account_by_id(account_id)
    if not account:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ account, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–ª–∞
    text = (
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º: <b>{html.escape(account.alias or f'ID {account.avito_user_id}')}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = get_single_account_menu(account)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


# 2. –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª—é—á–∏—Ç—å"
@router.callback_query(F.data.startswith("avito_acc:disable:"))
async def disable_avito_account(callback: types.CallbackQuery):
    """
    –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Avito (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç is_active = False).
    """
    account_id = int(callback.data.split(":")[2])
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await crud.toggle_avito_account_active_status(account_id, is_active=False)
    
    await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ –Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    accounts = await crud.get_user_avito_accounts(callback.from_user.id)
    text = "üë§ <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã Avito</b>\n\n–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    keyboard = get_avito_accounts_menu(accounts)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


# 3. –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–∫–ª—é—á–∏—Ç—å"
@router.callback_query(F.data.startswith("avito_acc:enable:"))
async def enable_avito_account(callback: types.CallbackQuery):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Avito (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç is_active = True).
    """
    account_id = int(callback.data.split(":")[2])

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await crud.toggle_avito_account_active_status(account_id, is_active=True)

    await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –≤–∫–ª—é—á–µ–Ω.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    accounts = await crud.get_user_avito_accounts(callback.from_user.id)
    text = "üë§ <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã Avito</b>\n\n–ê–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    keyboard = get_avito_accounts_menu(accounts)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("account_actions:chats:") | F.data.startswith("chats:list:"))
async def show_latest_chats(callback: types.CallbackQuery):
    try:
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await callback.answer()
    except TelegramBadRequest:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ callback —É–∂–µ "–ø—Ä–æ—Ç—É—Ö"
        pass

    parts = callback.data.split(":")
    account_id = int(parts[2])
    offset = int(parts[3]) if len(parts) > 3 else 0
    limit = 5 # –ó–∞–¥–∞–µ–º –ª–∏–º–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    account = await crud.get_avito_account_by_id(account_id)
    if not account:
        try:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except TelegramBadRequest: pass
        return
    
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Avito
    api_client = AvitoAPIClient(account)
    chats_data = await api_client.get_chats(limit=limit, offset=offset)
    
    # ---!!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–ï–†–ï–î–ê–ï–ú `limit` –ö–ê–ö –ü–û–°–õ–ï–î–ù–ò–ô –ê–†–ì–£–ú–ï–ù–¢ !!!---
    keyboard = build_chats_list_keyboard(chats_data.get("chats", []), account.id, offset, limit)
    
    try:
        await callback.message.edit_text(
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ **{html.escape(account.alias or f'ID {account.avito_user_id}')}**:", 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
             logger.warning(f"Could not edit message to show chats: {e}")


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ---
@router.callback_query(F.data.startswith("account_actions:stats:"))
async def show_account_stats(callback: types.CallbackQuery):
    try:
        await callback.answer("–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    except TelegramBadRequest:
        pass
        
    account_id = int(callback.data.split(":")[2])
    
    stats = await crud.get_account_stats(account_id)
    account = await crud.get_avito_account_by_id(account_id)
    
    if not account:
        try:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except TelegramBadRequest: pass
        return

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{html.escape(account.alias or f'ID {account.avito_user_id}')}</b>\n\n"
        "<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"  - –í—Ö–æ–¥—è—â–∏—Ö: {stats.get('today', {}).get('in', 0)}\n"
        f"  - –ò—Å—Ö–æ–¥—è—â–∏—Ö: {stats.get('today', {}).get('out', 0)}\n\n"
        "<b>–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:</b>\n"
        f"  - –í—Ö–æ–¥—è—â–∏—Ö: {stats.get('week', {}).get('in', 0)}\n"
        f"  - –ò—Å—Ö–æ–¥—è—â–∏—Ö: {stats.get('week', {}).get('out', 0)}"
    )
    
    keyboard = get_single_account_menu(account)
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
             logger.warning(f"Could not edit message to show stats: {e}")


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" (—à–∞–≥ 1: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) ---
@router.callback_query(F.data.startswith("account_actions:unbind_confirm:"))
async def unbind_account_confirm(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    account_id = int(callback.data.split(":")[2])
    
    text = (
        "<b>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∞–≤–∏–ª–∞, —Ç–æ–∫–µ–Ω—ã) –∏–∑ —Å–∏—Å—Ç–µ–º—ã. "
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –î–∞, –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"account_actions:unbind_execute:{account_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"avito_acc:select:{account_id}")
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
             logger.warning(f"Could not edit message for unbind confirmation: {e}")


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" (—à–∞–≥ 2: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ) ---
@router.callback_query(F.data.startswith("account_actions:unbind_execute:"))
async def unbind_account_execute(callback: types.CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split(":")[2])
    
    deleted = await crud.delete_avito_account(account_id)
    
    if deleted:
        try:
            await callback.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.", show_alert=True)
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å alert, –ø–æ–∫–∞–∂–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.")
    else:
        try:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        except TelegramBadRequest:
             await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await handle_navigation_by_action("accounts_list", callback, state)

@router.callback_query(F.data.startswith("support:faq:"))
async def handle_faq_answer(callback: types.CallbackQuery):
    question_key = callback.data.split(":")[2]
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –≤ –Ω–∞—à–µ–º –∫–æ–Ω—Ñ–∏–≥–µ
    answer_text = SUPPORT_FAQ.get(question_key, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="navigate:support")
    
    await callback.message.edit_text(
        text=answer_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–æ–º (–∑–∞–ø—É—Å–∫–∞–µ—Ç FSM) ---
@router.callback_query(F.data == "support:contact_admin")
async def contact_admin_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ContactAdmin.waiting_for_message)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="navigate:support") # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–µ–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@router.message(StateFilter(ContactAdmin.waiting_for_message))
async def forward_to_admin(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    
    admin_id = settings.telegram_admin_id
    if not admin_id:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        await handle_start_command(message, state)
        return

    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = message.text or message.caption
    if not user_text:
        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä –∏ —Ç.–¥.
        user_text = "(–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Å–º. –≤–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ)"

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–¥–º–∏–Ω–∞
    admin_card_text = (
        f"üë§ <b>–û—Ç:</b> {html.escape(message.from_user.full_name)}\n"
        f"<b>ID:</b> <code>{message.from_user.id}</code>\n"
        f"<b>Username:</b> @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n"
        f"<blockquote>{html.escape(user_text)}</blockquote>"
    )

    # 3. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", 
        callback_data=f"admin:reply_to:{message.from_user.id}:{message.message_id}"
    )
    
    try:
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å) –û–¢–î–ï–õ–¨–ù–û, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Ö –≤–∏–¥–µ—Ç—å. –ú—ã –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–µ—Ç.
        if message.content_type != types.ContentType.TEXT:
             await bot.copy_message(
                chat_id=admin_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à—É –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        await bot.send_message(
            chat_id=admin_id,
            text=admin_card_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        logger.error(f"Could not forward message to admin {admin_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await handle_start_command(message, state)

@router.callback_query(F.data.startswith("admin:reply_to:"))
async def admin_reply_start(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω
    if callback.from_user.id != settings.telegram_admin_id:
        await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    _, _, user_id_to_reply, message_id_to_reply = callback.data.split(":")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM, –∫–æ–º—É –∏ –Ω–∞ —á—Ç–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
    await state.update_data(
        user_id_to_reply=int(user_id_to_reply),
        message_id_to_reply=int(message_id_to_reply)
    )
    await state.set_state(ContactAdmin.waiting_for_admin_reply)
    
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...", show_alert=True)
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç", –∞ –Ω–µ alert
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


# ---!!! –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–ª–æ–≤–∏–º –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é) !!!---
@router.message(StateFilter(ContactAdmin.waiting_for_admin_reply))
async def admin_send_reply(message: types.Message, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ FSM –¥–∞–Ω–Ω—ã–µ, –∫–æ–º—É –∏ –Ω–∞ —á—Ç–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
    data = await state.get_data()
    user_id = data.get('user_id_to_reply')
    original_message_id = data.get('message_id_to_reply')
    
    if not user_id:
        await state.clear()
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏, –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å. –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
        return

    await state.clear()
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å
        original_message = await bot.forward_message(
            chat_id=message.chat.id, # –í—Ä–µ–º–µ–Ω–Ω–∞—è "–∫–æ—Ä–∑–∏–Ω–∞"
            from_chat_id=user_id,
            message_id=original_message_id,
            disable_notification=True
        )
        original_text = original_message.text or original_message.caption or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        await original_message.delete() # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_card_text = (
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n"
            f"<b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>\n"
            f"<blockquote>{html.escape(original_text)}</blockquote>\n\n"
            f"<b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            f"<blockquote>{html.escape(message.text)}</blockquote>"
        )
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=user_id,
            text=reply_card_text,
            parse_mode="HTML"
        )
        
        # 4. –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É, —á—Ç–æ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ
        await message.reply("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        logger.error(f"Failed to send admin reply to user {user_id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –û—à–∏–±–∫–∞: {e}")

# --- –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì–ò–†–£–Æ–©–ò–ô –•–ï–ù–î–õ–ï–† ---
# @router.callback_query()
# async def log_all_callbacks(callback: types.CallbackQuery):
#     """
#     –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï callback'–∏.
#     –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.
#     –í–ù–ò–ú–ê–ù–ò–ï: –û–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
#     –¥–ª—è callback'–æ–≤ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
#     """
#     logger.critical(f"!!!!!!!!!! CATCH-ALL CALLBACK HANDLER !!!!!!!!!!!")
#     logger.critical(f"Received callback_data: '{callback.data}'")
#     logger.critical(f"From message ID: {callback.message.message_id}")
#     # –ú–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª
#     await callback.answer(f"DEBUG: Got '{callback.data}'")

def register_all_handlers(dp: Dispatcher):
    dp.include_router(router)