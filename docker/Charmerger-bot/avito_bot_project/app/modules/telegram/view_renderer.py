import logging
import json
import html
from datetime import datetime
from typing import Optional

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º pytz –∏ select –∏–∑ sqlalchemy ---
import pytz
from sqlalchemy import select

from aiogram import Bot, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
import redis.asyncio as redis

from .view_models import ChatViewModel
from db_models import User
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º get_or_create_user, –æ–Ω –Ω–∞–º —Ç—É—Ç –Ω–µ –Ω—É–∂–µ–Ω ---
from .view_provider import unsubscribe_user_from_view
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_session –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î ---
from shared.database import get_session

logger = logging.getLogger(__name__)


class ViewRenderer:
    def __init__(self, bot: Bot, redis_client: redis.Redis):
        self.bot = bot
        self.redis = redis_client

    def _build_keyboard(self, model: ChatViewModel, for_telegram_id: int) -> InlineKeyboardBuilder:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        builder = InlineKeyboardBuilder()
        account_id = model['account_id']
        chat_id = model['chat_id']
        
        is_read_flag = model.get('is_last_message_read', True) # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True
        
        # ---!!! –û–¢–õ–ê–î–û–ß–ù–´–ô –õ–û–ì ‚Ññ5 !!!---
        logger.critical(
            f"[DEBUG-READ-STATUS] BUILD_KEYBOARD for chat {chat_id} (user: {for_telegram_id}): "
            f"Building button based on is_last_message_read = {is_read_flag}"
        )

        # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–∞
        if not is_read_flag:
            # –ö–Ω–æ–ø–∫–∞ "–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
            builder.button(text="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úîÔ∏è", callback_data=f"chat:mark_read:{account_id}:{chat_id}")
        else:
            # –ö–Ω–æ–ø–∫–∞ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ", –Ω–æ —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π,
            # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.
            # callback="chat:noop" - —ç—Ç–æ "no operation", –ø—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞.
            builder.button(text="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ ‚úÖ", callback_data="chat:noop")

        if model.get('is_blocked'):
            builder.button(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üîì", callback_data=f"chat:unblock:{account_id}:{chat_id}:{model.get('interlocutor_id')}")
        else:
            builder.button(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üîí", callback_data=f"chat:block:{account_id}:{chat_id}:{model.get('interlocutor_id')}")
        
        builder.button(text="–®–∞–±–ª–æ–Ω—ã üìÑ", callback_data=f"chat:templates:{account_id}:{chat_id}")
        builder.button(text="–†–µ–¥. –∑–∞–º–µ—Ç–∫—É ‚úèÔ∏è", callback_data=f"chat:edit_note:{account_id}:{chat_id}")

        builder.adjust(2, 2)
        return builder

    def _build_text(self, model: ChatViewModel, user_timezone_str: str) -> str:
        try:
            user_tz = pytz.timezone(user_timezone_str)
        except pytz.UnknownTimeZoneError:
            user_tz = pytz.timezone("Europe/Moscow")

        # --- –ë–ª–æ–∫ 1: –®–∞–ø–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        account_display_name = html.escape(model.get('account_alias') or f"–ê–∫–∫–∞—É–Ω—Ç ID {model.get('account_id')}")
        header_text = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å ¬´{account_display_name}¬ª</b>"
        interlocutor_name = html.escape(model.get('interlocutor_name', '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'))
        item_title = html.escape(model.get("item_title", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"))
        item_price = html.escape(model.get("item_price_string", ""))
        header_parts = [header_text, f"üë§ <b>–û—Ç:</b> {interlocutor_name}"]
        if ts := model.get('last_client_message_timestamp'):
            dt_utc = datetime.fromtimestamp(ts, tz=pytz.utc)
            dt_local = dt_utc.astimezone(user_tz)
            header_parts.append(f"‚è∞ {dt_local.strftime('%d.%m.%Y %H:%M')} ({dt_local.tzname()})")
        item_url = model.get("item_url")
        item_link = f"<a href='{item_url}'>{item_title}</a>" if item_url else item_title
        price_part = f" | <b>{item_price}</b>" if item_price else ""
        header_parts.append(f"üì¶ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> {item_link}{price_part}")
        header_block = "\n".join(header_parts)

        # --- –ë–ª–æ–∫ 2: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê) ---
        attachment_info = model.get('last_client_message_attachment')
        client_text = model.get('last_client_message_text')
        
        message_content_html = ""

        if attachment_info:
            attachment_type_display = html.escape(attachment_info.get('type', '–≤–ª–æ–∂–µ–Ω–∏–µ'))
            message_content_html = f"<i><b>–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ {attachment_type_display}</b> (—Å–º. —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ).</i>"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (–Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)
            if client_text and not client_text.startswith(f"[{attachment_type_display.capitalize()}]"):
                message_content_html += f"\n\n<b>–ü–æ–¥–ø–∏—Å—å:</b> <blockquote>{html.escape(client_text)}</blockquote>"
        elif client_text:
            message_content_html = f"<blockquote>{html.escape(client_text)}</blockquote>"
        else:
            message_content_html = "<i>(–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...)</i>"

        message_block = f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n{message_content_html}"

        # --- –ë–ª–æ–∫ 3: –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ action_log (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ---
        manual_reply_block = ""
        other_actions_block = ""
        if action_log := model.get('action_log'):
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_log = sorted(action_log, key=lambda x: x.get('timestamp', 0), reverse=True)
            
            manual_parts = []
            other_parts = []

            for entry in sorted_log:
                author = html.escape(entry.get("author_name", "..."))
                text = html.escape(entry.get("text", "..."))
                entry_type = entry.get("type")
                
                if entry_type in ["manual_reply", "image_reply"]:
                    dt_utc = datetime.fromtimestamp(entry.get('timestamp', 0), tz=pytz.utc)
                    dt_local = dt_utc.astimezone(user_tz)
                    time_str = dt_local.strftime('%d.%m %H:%M')
                    prefix = f"<b>–û—Ç–≤–µ—Ç –æ—Ç {author}</b> ({time_str}):"
                    manual_parts.append(f"{prefix}\n<blockquote>{text}</blockquote>")

                elif entry_type == "template_reply":
                    tpl_name = html.escape(entry.get("template_name", "..."))
                    prefix = f"üìÑ <b>–®–∞–±–ª–æ–Ω ¬´{tpl_name}¬ª</b> ({author}):"
                    other_parts.append(f"{prefix}\n<blockquote>{text}</blockquote>")

                elif entry_type == "auto_reply":
                    rule_name = html.escape(entry.get("rule_name", "..."))
                    prefix = f"ü§ñ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç ¬´{rule_name}¬ª:</b>"
                    other_parts.append(f"{prefix}\n<blockquote>{text}</blockquote>")

            if manual_parts:
                all_manual_text = "\n\n".join(manual_parts)
                manual_reply_block = (f'‚úçÔ∏è <b>–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã ({len(manual_parts)}):</b>\n<blockquote expandable>{all_manual_text}</blockquote>')
            
            if other_parts:
                other_actions_block = "\n\n".join(other_parts)

        # --- –ë–ª–æ–∫ 4: –ó–∞–º–µ—Ç–∫–∏ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î) ---
        notes_block = ""
        if notes := model.get('notes'):
            sorted_notes = sorted(notes.values(), key=lambda x: x.get('timestamp', 0), reverse=True)
            if sorted_notes:
                notes_html_parts = []
                for note in sorted_notes:
                    author = html.escape(note.get('author_name', '...'))
                    text = html.escape(note.get('text', '...'))
                    dt_utc = datetime.fromtimestamp(note.get('timestamp', 0), tz=pytz.utc)
                    dt_local = dt_utc.astimezone(user_tz)
                    date_str = dt_local.strftime('%d.%m.%y %H:%M')
                    notes_html_parts.append(f"<b>–û—Ç {author}</b> ({date_str})\n{text}")
                all_notes_text = "\n\n".join(notes_html_parts)
                notes_block = (f'üìå <b>–ó–∞–º–µ—Ç–∫–∏ –∫ —á–∞—Ç—É ({len(sorted_notes)}):</b>\n<blockquote expandable>{all_notes_text}</blockquote>')
            
        # --- –§–∏–Ω–∞–ª—å–Ω–∞—è –°–±–æ—Ä–∫–∞ ---
        final_parts = [header_block, message_block]
        if other_actions_block: final_parts.append(other_actions_block)
        if manual_reply_block: final_parts.append(manual_reply_block)
        if notes_block: final_parts.append(notes_block)
        return "\n\n".join(final_parts)

    async def render_new_card(self, model: ChatViewModel, user: User) -> Optional[types.Message]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        telegram_chat_id = user.telegram_id
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ _build_text
        text = self._build_text(model, user.timezone)
        keyboard = self._build_keyboard(model, telegram_chat_id).as_markup()
        
        try:
            return await self.bot.send_message(
                chat_id=telegram_chat_id, text=text, reply_markup=keyboard,
                parse_mode=ParseMode.HTML, disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"RENDERER: Error sending new card to {telegram_chat_id}: {e}", exc_info=True)
            return None

    async def update_all_subscribers(self, view_key: str, model: ChatViewModel):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö —Ç–∞–π–º–∑–æ–Ω—ã."""
        subscribers = model.get("subscribers", {})
        if not subscribers:
            logger.info(f"RENDERER: No subscribers for {view_key}. Nothing to update.")
            return
        
        logger.info(f"RENDERER: Updating cards for {len(subscribers)} subscribers of {view_key}")
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscriber_ids = [int(tg_id) for tg_id in subscribers.keys()]
        if not subscriber_ids: return

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –ë–î
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id.in_(subscriber_ids))
            )
            users_map = {user.telegram_id: user for user in result.scalars().all()}
        
        # 3. –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        for tg_id_str, msg_id in list(subscribers.items()):
            tg_id = int(tg_id_str)
            user = users_map.get(tg_id)
            if not user:
                logger.warning(f"RENDERER: User {tg_id} not found in DB, skipping update.")
                continue

            # –ü–µ—Ä–µ–¥–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ _build_text
            text = self._build_text(model, user.timezone)
            keyboard = self._build_keyboard(model, tg_id).as_markup()
            
            try:
                await self.bot.edit_message_text(
                    text=text, chat_id=tg_id, message_id=msg_id, reply_markup=keyboard,
                    parse_mode=ParseMode.HTML, disable_web_page_preview=True
                )
            except TelegramBadRequest as e:
                if "message to edit not found" in e.message or "message can't be edited" in e.message:
                    logger.warning(f"RENDERER: Message {msg_id} for user {tg_id} is gone. Unsubscribing.")
                    await unsubscribe_user_from_view(self.redis, view_key, tg_id)
                elif "message is not modified" not in str(e):
                    pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –Ω–µ–æ–ø–∞—Å–Ω—É—é –æ—à–∏–±–∫—É
                else:
                    logger.warning(f"RENDERER: Failed to edit for user {tg_id}: {e.message}")
            except Exception as e:
                logger.error(f"RENDERER: Unexpected error updating for {tg_id}:{msg_id}: {e}", exc_info=True)