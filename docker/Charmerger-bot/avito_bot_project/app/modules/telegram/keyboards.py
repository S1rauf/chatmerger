# /app/modules/telegram/keyboards.py

import logging
from typing import List, Optional
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    WebAppInfo
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import types
from shared.config import settings
from db_models import User, Template
from modules.billing.config import TARIFF_CONFIG, DEPOSIT_OPTIONS_KOP
from modules.billing.enums import TariffPlan
from shared.config import SUPPORT_FAQ

logger = logging.getLogger(__name__)

# --- –ì–õ–ê–í–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –¢–ï–ü–ï–†–¨ INLINE ---
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ò–ù–õ–ê–ô–ù-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    builder = InlineKeyboardBuilder()
    
    panel_url = f"{settings.webapp_base_url}/panel"
    logger.info(f"KEYBOARD_BUILDER: Creating Inline WebApp button with URL: {panel_url}")
    builder.button(text="üë§ –ú–æ–∏ Avito –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="navigate:accounts_list")
    builder.button(text="‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=panel_url))
    builder.button(text="‚≠ê –¢–∞—Ä–∏—Ñ—ã –∏ –ö–æ—à–µ–ª–µ–∫", callback_data="navigate:wallet_and_tariffs") 
    builder.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="navigate:support")
    
    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    
    return builder.as_markup()

def get_avito_accounts_menu(accounts: List["AvitoAccount"]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Avito-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    
    # –°—Ö–µ–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    layout = []

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if accounts:
        for acc in accounts:
            account_name = acc.alias or f"ID: {acc.avito_user_id}"
            status_icon = "üü¢" if acc.is_active else "üî¥"
            
            builder.button(text=f"‚û°Ô∏è {status_icon} {account_name}", callback_data=f"avito_acc:select:{acc.id}")
            builder.button(text="‚úèÔ∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º", callback_data=f"avito_acc:rename:{acc.id}")
            
            if acc.is_active:
                builder.button(text="üóë –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"avito_acc:disable:{acc.id}")
            else:
                builder.button(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"avito_acc:enable:{acc.id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à—É —Å—Ö–µ–º—É: 1 –∫–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 2 –≤–æ –≤—Ç–æ—Ä–æ–º
            layout.extend([1, 2])

    # 2. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥"
    if not accounts:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç, —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –¥—Ä—É–≥–æ–π
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="avito_acc:add_new")
    else:
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ Avito –∞–∫–∫–∞—É–Ω—Ç", callback_data="avito_acc:add_new")
        
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="navigate:main_menu")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à—É —Å—Ö–µ–º—É: —ç—Ç–∏ 2 –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∫–∞–∂–¥–∞—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    layout.extend([1, 1])

    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å—é —Å—Ö–µ–º—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–æ–º
    builder.adjust(*layout)
    
    return builder.as_markup()


def get_single_account_menu(account: "AvitoAccount") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –û–î–ù–ò–ú –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º Avito.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –ß–∞—Ç—ã", callback_data=f"account_actions:chats:{account.id}")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"account_actions:stats:{account.id}")
    builder.button(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"account_actions:unbind_confirm:{account.id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="navigate:accounts_list")
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏: –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É, –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    builder.adjust(1)
    
    return builder.as_markup()

    
def build_chats_list_keyboard(
    chats: list, 
    account_id: int, 
    offset: int,
    limit: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    for chat in chats:
        interlocutor_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        for user in chat.get("users", []):
            if not user.get("is_self"):
                interlocutor_name = user.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                break
        
        item_title = chat.get("context", {}).get("value", {}).get("title", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ")
        item_title_short = (item_title[:30] + '..') if len(item_title) > 30 else item_title
        
        builder.button(
            text=f"üó£Ô∏è {interlocutor_name} | {item_title_short}",
            callback_data=f"chat:show:{account_id}:{chat['id']}"
        )
    
    # --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
    pagination_buttons = []
    if offset > 0:
        prev_offset = max(0, offset - limit)
        pagination_buttons.append(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"chats:list:{account_id}:{prev_offset}")
        )
        
    if len(chats) == limit:
        next_offset = offset + limit
        pagination_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"chats:list:{account_id}:{next_offset}")
        )
        
    if pagination_buttons:
        builder.row(*pagination_buttons)
        
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    builder.button(
        text="‚¨ÖÔ∏è –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞", 
        callback_data=f"avito_acc:select:{account_id}"
    )

    builder.adjust(1) # –ö–∞–∂–¥—ã–π —á–∞—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

def get_wallet_menu_keyboard(user: User) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é "–ö–æ—à–µ–ª–µ–∫ –∏ –¢–∞—Ä–∏—Ñ—ã".
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="wallet:deposit")
    builder.button(text="üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="navigate:tariffs_list")
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="navigate:main_menu")

    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

    return builder.as_markup()


from modules.billing.enums import TariffPlan
from modules.billing.config import TARIFF_CONFIG


def get_tariffs_list_keyboard(current_user_plan: TariffPlan) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—É—â–∏–º–∏.
    """
    builder = InlineKeyboardBuilder()

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–∞—Ä–∏—Ñ–∞–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—É—â–∏–º–∏
    for plan_enum, config in TARIFF_CONFIG.items():
        # –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
        if plan_enum != current_user_plan and plan_enum != TariffPlan.START:
            button_text = f"üöÄ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ ¬´{config['name_readable']}¬ª"
            builder.button(text=button_text, callback_data=f"billing:purchase:{plan_enum.value}")
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="wallet:deposit")
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∫–æ—à–µ–ª—å–∫–∞
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="navigate:wallet_and_tariffs")

    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

def get_deposit_options_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    for amount_kop in DEPOSIT_OPTIONS_KOP:
        amount_rub = amount_kop / 100
        builder.button(text=f"{amount_rub:.0f} ‚ÇΩ", callback_data=f"deposit:amount:{amount_kop}")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="navigate:wallet_and_tariffs")
    builder.adjust(2, 2, 1, 1) # –ö—Ä–∞—Å–∏–≤–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    return builder.as_markup()

def get_templates_for_chat_keyboard(templates: List[Template], account_id: int, chat_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç.
    """
    builder = InlineKeyboardBuilder()
    
    if templates:
        for tpl in templates:
            tpl_name = (tpl.name[:25] + '..') if len(tpl.name) > 25 else tpl.name
            builder.button(
                text=f"üìÑ {tpl_name}", 
                callback_data=f"template:send:{tpl.id}:{account_id}:{chat_id}"
            )
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 2 —à–∞–±–ª–æ–Ω–∞ –≤ —Ä—è–¥
        builder.adjust(2, repeat=True)
    else:
        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç, —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        builder.button(text="–£ –≤–∞—Å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –≤ WebApp.", callback_data="navigate:webapp_info")

    builder.row(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —á–∞—Ç—É", 
        callback_data=f"chat:show:{account_id}:{chat_id}"
    ))
    # ---

    return builder.as_markup()

def get_support_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ FAQ."""
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    for key, question_html in SUPPORT_FAQ.items():
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ \n) –∏ —É–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
        question_text = question_html.split('\n')[0].replace('<b>', '').replace('</b>', '').replace('‚ùì ', '')
        builder.button(text=f"‚ùì {question_text}", callback_data=f"support:faq:{key}")
        
    builder.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="support:contact_admin")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="navigate:main_menu")
    
    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()