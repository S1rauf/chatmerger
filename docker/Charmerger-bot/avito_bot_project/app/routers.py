# /app/routers.py
import logging
from typing import Optional
from datetime import datetime, timedelta, timezone
from fastapi import APIRouter, Request, HTTPException, Header
from fastapi.responses import RedirectResponse, HTMLResponse
from aiogram.utils.keyboard import InlineKeyboardBuilder
# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from modules.avito.auth import AvitoOAuth
from modules.avito.webhook import AvitoWebhookHandler
from modules.avito.client import AvitoAPIClient
from modules.telegram.bot import process_telegram_update, WEBHOOK_PATH, bot
from modules.database import crud
from shared.database import get_session
from db_models import User, AvitoAccount
from shared.security import encrypt_token
from shared.config import settings
from modules.user_actions.onboarding import check_and_send_terms_agreement

logger = logging.getLogger(__name__)

# –≠—Ç–æ—Ç —Ä–æ—É—Ç–µ—Ä –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py
api_router = APIRouter()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ OAuth-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
@api_router.get("/connect/avito", tags=["Avito OAuth"])
async def get_avito_connect_url(request: Request, user_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Avito –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        oauth_manager = AvitoOAuth(redis_client=request.app.state.redis)
        avito_auth_url = await oauth_manager.get_authorization_url(internal_user_id=user_id)
        return RedirectResponse(url=avito_auth_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL-–∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Could not generate authorization URL.")

# --- –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ ---
@api_router.get("/", tags=["Root"])
async def root(
    request: Request,
    code: Optional[str] = None,
    state: Optional[str] = None
):
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç. 
    - –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ code –∏ state, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth –∫–æ–ª–ª–±—ç–∫.
    - –ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç.
    """
    if code and state:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Avito OAuth –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ...")
        oauth_manager = AvitoOAuth(redis_client=request.app.state.redis)
        
        try:
            # 1. –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            result = await oauth_manager.exchange_code_for_tokens(code=code, state=state)
            internal_user_id = result['internal_user_id']
            tokens_data = result['tokens_data']
            
            # 2. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Avito —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            temp_account_obj = AvitoAccount(
                user_id=internal_user_id, avito_user_id=0,
                encrypted_oauth_token=encrypt_token(tokens_data['access_token']),
                encrypted_refresh_token=encrypt_token(tokens_data['refresh_token']),
                expires_at=datetime.now(timezone.utc) + timedelta(seconds=tokens_data['expires_in'])
            )
            api_client = AvitoAPIClient(account=temp_account_obj)
            user_info = await api_client.get_own_user_info()
            avito_user_id = user_info['id']
            logger.info(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Avito —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {avito_user_id}")
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤ –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            async with get_session() as session:
                # 3.1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                db_user = await session.get(User, internal_user_id)
                if not db_user:
                    raise HTTPException(status_code=404, detail="User not found during OAuth callback")
                
                # 3.2. –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Avito –∞–∫–∫–∞—É–Ω—Ç
                db_account = await crud.add_or_update_avito_account(
                    session=session,
                    user_id=internal_user_id,
                    avito_user_id=avito_user_id,
                    tokens_data=tokens_data
                )

                # 3.3. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤–µ–±—Ö—É–∫–∏
                final_api_client = AvitoAPIClient(account=db_account)
                avito_webhook_url = f"{settings.webapp_base_url}/webhook/avito"
                await final_api_client.subscribe_to_webhook(webhook_url=avito_webhook_url)
                
                # 3.4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ
                await check_and_send_terms_agreement(
                    user=db_user,
                    session=session,
                    redis_client=request.app.state.redis
                )
                
                # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                await session.commit()

            # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä–∞—Å–∏–≤—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–± —É—Å–ø–µ—Ö–µ
            html_content = """
            <html><head><title>–£—Å–ø–µ—à–Ω–æ!</title><style>body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif;display:flex;justify-content:center;align-items:center;height:100vh;background-color:#f0f2f5;margin:0}.card{background-color:white;padding:40px;border-radius:8px;box-shadow:0 4px 12px rgba(0,0,0,0.1);text-align:center}h1{color:#2ecc71}p{color:#555}</style></head>
            <body><div class="card"><h1>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h1><p>–ê–∫–∫–∞—É–Ω—Ç Avito –ø–æ–¥–∫–ª—é—á–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.</p></div></body></html>
            """
            return HTMLResponse(content=html_content)

        except ValueError as e:
            logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OAuth –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            error_html = "<html><body><h1>ü§î –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h1><p>–ü–æ—Ö–æ–∂–µ, –≤–∞—à–∞ —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞...</p></body></html>"
            return HTMLResponse(content=error_html, status_code=400)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ OAuth –Ω–∞ –∫–æ—Ä–Ω–µ: {e}", exc_info=True)
            error_html = "<html><body><h1>‚ùå –û—à–∏–±–∫–∞</h1><p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...</p></body></html>"
            return HTMLResponse(content=error_html, status_code=500)
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        logger.info(
            f"ROOT_ENDPOINT_HIT: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: {request.url}. "
            f"–ö–ª–∏–µ–Ω—Ç: {request.client.host}:{request.client.port}. "
            f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}"
        )
        return {"status": "ok", "service": "Avito Bot Project"}


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Avito ---
@api_router.post("/webhook/avito", tags=["Avito Webhook"])
async def avito_webhook_endpoint(request: Request, x_signature: Optional[str] = Header(None)):
    try:
        # –°–û–ó–î–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–î–ï–°–¨, –ü–û –¢–†–ï–ë–û–í–ê–ù–ò–Æ
        webhook_handler = AvitoWebhookHandler(redis_client=request.app.state.redis)
        await webhook_handler.handle_request(request, x_signature)
        return {"status": "ok"}
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–µ–±—Ö—É–∫–∞ Avito: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to process webhook.")


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram ---
@api_router.post(WEBHOOK_PATH, include_in_schema=False)
async def telegram_webhook_endpoint(update: dict):
    await process_telegram_update(update)
    return {"status": "ok"}
